// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package repository_mock is a generated GoMock package.
package repository_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pariip/notes-go/internal/models"
)

// MockMainRepository is a mock of MainRepository interface.
type MockMainRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMainRepositoryMockRecorder
}

// MockMainRepositoryMockRecorder is the mock recorder for MockMainRepository.
type MockMainRepositoryMockRecorder struct {
	mock *MockMainRepository
}

// NewMockMainRepository creates a new mock instance.
func NewMockMainRepository(ctrl *gomock.Controller) *MockMainRepository {
	mock := &MockMainRepository{ctrl: ctrl}
	mock.recorder = &MockMainRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMainRepository) EXPECT() *MockMainRepositoryMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockMainRepository) CreateNote(note *models.Note) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", note)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockMainRepositoryMockRecorder) CreateNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockMainRepository)(nil).CreateNote), note)
}

// CreateUser mocks base method.
func (m *MockMainRepository) CreateUser(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMainRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMainRepository)(nil).CreateUser), user)
}

// DeleteNote mocks base method.
func (m *MockMainRepository) DeleteNote(note *models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockMainRepositoryMockRecorder) DeleteNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockMainRepository)(nil).DeleteNote), note)
}

// DeleteUser mocks base method.
func (m *MockMainRepository) DeleteUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockMainRepositoryMockRecorder) DeleteUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockMainRepository)(nil).DeleteUser), user)
}

// GetAllMyNotes mocks base method.
func (m *MockMainRepository) GetAllMyNotes(userID uint) ([]*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMyNotes", userID)
	ret0, _ := ret[0].([]*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMyNotes indicates an expected call of GetAllMyNotes.
func (mr *MockMainRepositoryMockRecorder) GetAllMyNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMyNotes", reflect.TypeOf((*MockMainRepository)(nil).GetAllMyNotes), userID)
}

// GetAllNotes mocks base method.
func (m *MockMainRepository) GetAllNotes(userID uint) ([]*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", userID)
	ret0, _ := ret[0].([]*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockMainRepositoryMockRecorder) GetAllNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*MockMainRepository)(nil).GetAllNotes), userID)
}

// GetNoteByID mocks base method.
func (m *MockMainRepository) GetNoteByID(id uint) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", id)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MockMainRepositoryMockRecorder) GetNoteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*MockMainRepository)(nil).GetNoteByID), id)
}

// GetUserByID mocks base method.
func (m *MockMainRepository) GetUserByID(id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockMainRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockMainRepository)(nil).GetUserByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockMainRepository) GetUserByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockMainRepositoryMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockMainRepository)(nil).GetUserByUsername), username)
}

// IsImageExist mocks base method.
func (m *MockMainRepository) IsImageExist(picAlt string) (*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImageExist", picAlt)
	ret0, _ := ret[0].(*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsImageExist indicates an expected call of IsImageExist.
func (mr *MockMainRepositoryMockRecorder) IsImageExist(picAlt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImageExist", reflect.TypeOf((*MockMainRepository)(nil).IsImageExist), picAlt)
}

// IsUsernameExist mocks base method.
func (m *MockMainRepository) IsUsernameExist(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsernameExist", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUsernameExist indicates an expected call of IsUsernameExist.
func (mr *MockMainRepositoryMockRecorder) IsUsernameExist(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsernameExist", reflect.TypeOf((*MockMainRepository)(nil).IsUsernameExist), username)
}

// UpdateNote mocks base method.
func (m *MockMainRepository) UpdateNote(note *models.Note) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", note)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockMainRepositoryMockRecorder) UpdateNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockMainRepository)(nil).UpdateNote), note)
}

// UpdateUser mocks base method.
func (m *MockMainRepository) UpdateUser(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockMainRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockMainRepository)(nil).UpdateUser), user)
}

// UploadImage mocks base method.
func (m *MockMainRepository) UploadImage(pic *models.Picture) (*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", pic)
	ret0, _ := ret[0].(*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockMainRepositoryMockRecorder) UploadImage(pic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockMainRepository)(nil).UploadImage), pic)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepository) CreateUser(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepository)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockUserRepository) DeleteUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserRepositoryMockRecorder) DeleteUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserRepository)(nil).DeleteUser), user)
}

// GetUserByID mocks base method.
func (m *MockUserRepository) GetUserByID(id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockUserRepositoryMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserByID), id)
}

// GetUserByUsername mocks base method.
func (m *MockUserRepository) GetUserByUsername(username string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", username)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserRepositoryMockRecorder) GetUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserRepository)(nil).GetUserByUsername), username)
}

// IsUsernameExist mocks base method.
func (m *MockUserRepository) IsUsernameExist(username string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUsernameExist", username)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUsernameExist indicates an expected call of IsUsernameExist.
func (mr *MockUserRepositoryMockRecorder) IsUsernameExist(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUsernameExist", reflect.TypeOf((*MockUserRepository)(nil).IsUsernameExist), username)
}

// UpdateUser mocks base method.
func (m *MockUserRepository) UpdateUser(user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserRepositoryMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserRepository)(nil).UpdateUser), user)
}

// MockNoteRepository is a mock of NoteRepository interface.
type MockNoteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNoteRepositoryMockRecorder
}

// MockNoteRepositoryMockRecorder is the mock recorder for MockNoteRepository.
type MockNoteRepositoryMockRecorder struct {
	mock *MockNoteRepository
}

// NewMockNoteRepository creates a new mock instance.
func NewMockNoteRepository(ctrl *gomock.Controller) *MockNoteRepository {
	mock := &MockNoteRepository{ctrl: ctrl}
	mock.recorder = &MockNoteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteRepository) EXPECT() *MockNoteRepositoryMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteRepository) CreateNote(note *models.Note) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", note)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteRepositoryMockRecorder) CreateNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteRepository)(nil).CreateNote), note)
}

// DeleteNote mocks base method.
func (m *MockNoteRepository) DeleteNote(note *models.Note) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", note)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNoteRepositoryMockRecorder) DeleteNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNoteRepository)(nil).DeleteNote), note)
}

// GetAllMyNotes mocks base method.
func (m *MockNoteRepository) GetAllMyNotes(userID uint) ([]*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMyNotes", userID)
	ret0, _ := ret[0].([]*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMyNotes indicates an expected call of GetAllMyNotes.
func (mr *MockNoteRepositoryMockRecorder) GetAllMyNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMyNotes", reflect.TypeOf((*MockNoteRepository)(nil).GetAllMyNotes), userID)
}

// GetAllNotes mocks base method.
func (m *MockNoteRepository) GetAllNotes(userID uint) ([]*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", userID)
	ret0, _ := ret[0].([]*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockNoteRepositoryMockRecorder) GetAllNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*MockNoteRepository)(nil).GetAllNotes), userID)
}

// GetNoteByID mocks base method.
func (m *MockNoteRepository) GetNoteByID(id uint) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", id)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MockNoteRepositoryMockRecorder) GetNoteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*MockNoteRepository)(nil).GetNoteByID), id)
}

// UpdateNote mocks base method.
func (m *MockNoteRepository) UpdateNote(note *models.Note) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", note)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNoteRepositoryMockRecorder) UpdateNote(note interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNoteRepository)(nil).UpdateNote), note)
}

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// IsImageExist mocks base method.
func (m *MockImageRepository) IsImageExist(picAlt string) (*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImageExist", picAlt)
	ret0, _ := ret[0].(*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsImageExist indicates an expected call of IsImageExist.
func (mr *MockImageRepositoryMockRecorder) IsImageExist(picAlt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImageExist", reflect.TypeOf((*MockImageRepository)(nil).IsImageExist), picAlt)
}

// UploadImage mocks base method.
func (m *MockImageRepository) UploadImage(pic *models.Picture) (*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadImage", pic)
	ret0, _ := ret[0].(*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadImage indicates an expected call of UploadImage.
func (mr *MockImageRepositoryMockRecorder) UploadImage(pic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadImage", reflect.TypeOf((*MockImageRepository)(nil).UploadImage), pic)
}
