// Code generated by MockGen. DO NOT EDIT.
// Source: ./validation.go

// Package validation_mock is a generated GoMock package.
package validation_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockValidationService is a mock of ValidationService interface.
type MockValidationService struct {
	ctrl     *gomock.Controller
	recorder *MockValidationServiceMockRecorder
}

// MockValidationServiceMockRecorder is the mock recorder for MockValidationService.
type MockValidationServiceMockRecorder struct {
	mock *MockValidationService
}

// NewMockValidationService creates a new mock instance.
func NewMockValidationService(ctrl *gomock.Controller) *MockValidationService {
	mock := &MockValidationService{ctrl: ctrl}
	mock.recorder = &MockValidationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockValidationService) EXPECT() *MockValidationServiceMockRecorder {
	return m.recorder
}

// Password mocks base method.
func (m *MockValidationService) Password(password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Password", password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Password indicates an expected call of Password.
func (mr *MockValidationServiceMockRecorder) Password(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Password", reflect.TypeOf((*MockValidationService)(nil).Password), password)
}

// Username mocks base method.
func (m *MockValidationService) Username(username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Username", username)
	ret0, _ := ret[0].(error)
	return ret0
}

// Username indicates an expected call of Username.
func (mr *MockValidationServiceMockRecorder) Username(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Username", reflect.TypeOf((*MockValidationService)(nil).Username), username)
}
