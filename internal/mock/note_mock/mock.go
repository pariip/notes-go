// Code generated by MockGen. DO NOT EDIT.
// Source: ./note.go

// Package note_mock is a generated GoMock package.
package note_mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/pariip/notes-go/internal/models"
	params "github.com/pariip/notes-go/internal/params"
)

// MockNoteService is a mock of NoteService interface.
type MockNoteService struct {
	ctrl     *gomock.Controller
	recorder *MockNoteServiceMockRecorder
}

// MockNoteServiceMockRecorder is the mock recorder for MockNoteService.
type MockNoteServiceMockRecorder struct {
	mock *MockNoteService
}

// NewMockNoteService creates a new mock instance.
func NewMockNoteService(ctrl *gomock.Controller) *MockNoteService {
	mock := &MockNoteService{ctrl: ctrl}
	mock.recorder = &MockNoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNoteService) EXPECT() *MockNoteServiceMockRecorder {
	return m.recorder
}

// CreateNote mocks base method.
func (m *MockNoteService) CreateNote(req *params.CreateNoteRequest) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", req)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockNoteServiceMockRecorder) CreateNote(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockNoteService)(nil).CreateNote), req)
}

// DeleteNote mocks base method.
func (m *MockNoteService) DeleteNote(noteID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", noteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockNoteServiceMockRecorder) DeleteNote(noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockNoteService)(nil).DeleteNote), noteID)
}

// GetAllNotes mocks base method.
func (m *MockNoteService) GetAllNotes(userID uint) ([]*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNotes", userID)
	ret0, _ := ret[0].([]*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllNotes indicates an expected call of GetAllNotes.
func (mr *MockNoteServiceMockRecorder) GetAllNotes(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNotes", reflect.TypeOf((*MockNoteService)(nil).GetAllNotes), userID)
}

// GetNoteByID mocks base method.
func (m *MockNoteService) GetNoteByID(noteID uint) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteByID", noteID)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNoteByID indicates an expected call of GetNoteByID.
func (mr *MockNoteServiceMockRecorder) GetNoteByID(noteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteByID", reflect.TypeOf((*MockNoteService)(nil).GetNoteByID), noteID)
}

// UpdateNote mocks base method.
func (m *MockNoteService) UpdateNote(req *params.UpdateNoteRequest) (*models.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", req)
	ret0, _ := ret[0].(*models.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockNoteServiceMockRecorder) UpdateNote(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockNoteService)(nil).UpdateNote), req)
}
